import { Suspense, useEffect, useState, useRef } from "react"
import { Canvas, useFrame } from "@react-three/fiber"
import { useGLTF, useTexture, useAnimations } from "@react-three/drei"
import { easing } from "maath"

// Rig组件: 实现相机跟随鼠标移动的效果
function Rig() {
  return useFrame((state, delta) => {
    // 使用easing.damp3实现平滑的相机位置过渡
    // 相机位置根据鼠标位置(state.mouse)进行偏移
    easing.damp3(
      state.camera.position,
      [1 + state.mouse.x / 4, 1.5 + state.mouse.y / 4, 2.5],
      0.2,  // 阻尼系数
      delta  // 帧时间差
    )
  })
}

// 主应用组件
export default function App() {
  return (
    // 创建3D场景，配置阴影和相机参数
    <Canvas shadows camera={{ position: [1, 1.5, 2.5], fov: 50 }}>
      {/* 环境光 */}
      <ambientLight />
      {/* 平行光源，用于产生阴影 */}
      <directionalLight position={[-5, 5, 5]} castShadow shadow-mapSize={1024} />
      
      {/* 模型容器 */}
      <group position={[0, -1, 0]}>
        <Suspense fallback={null}>
          <Model />
        </Suspense>
      </group>
      
      {/* 地面平面，接收阴影 */}
      <mesh rotation={[-0.5 * Math.PI, 0, 0]} position={[0, -1, 0]} receiveShadow>
        <planeGeometry args={[10, 10, 1, 1]} />
        <shadowMaterial transparent opacity={0.2} />
      </mesh>
      
      {/* 相机控制器 */}
      <Rig />
    </Canvas>
  )
}

/*
This file was generated by https://github.com/pmndrs/gltfjsx and then
customized manually. It uses drei's new useAnimations hook which extracts
all actions and sets up a THREE.AnimationMixer for it so that you don't have to.
All of the assets actions, action-names and clips are available in its output. 
*/

// Model组件：处理3D模型的加载、动画和交互
function Model(props) {
  // 创建光环引用
  const halo = useRef()
  
  // 加载模型贴图和GLB文件
  const texture = useTexture("/stacy.jpg")
  const mode = useGLTF("/stacy.glb")
  const { nodes, materials, animations } = mode
  
  // 设置动画系统
  const { ref, actions, names } = useAnimations(animations)
  
  // 状态管理
  const [hovered, setHovered] = useState(false)  // 悬停状态
  const [index, setIndex] = useState(4)         // 当前动画索引

  // 鼠标悬停时改变光标样式
  useEffect(() => {
    document.body.style.cursor = hovered ? "pointer" : "auto"
  }, [hovered])

  // 切换动画效果
  useEffect(() => {
    // 重置并淡入新动画
    actions[names[index]].reset().fadeIn(0.5).play()
    
    // 清理函数：淡出当前动画
    return () => actions[names[index]].fadeOut(0.5)
  }, [index, actions, names])

  // 更新光环效果
  useFrame((state, delta) => {
    // 光环缩放动画
    easing.damp3(
      halo.current.scale,
      hovered ? 1.15 : 1,
      0.2,
      delta
    )
    // 光环颜色动画
    easing.dampC(
      halo.current.material.color,
      hovered ? "hotpink" : "aquamarine",
      0.2,
      delta
    )
  })

  return (
    <group ref={ref} {...props} dispose={null}>
      {/* 模型组 */}
      <group rotation={[Math.PI / 2, 0, 0]} scale={0.01}>
        {/* 骨骼根节点 */}
        <primitive object={nodes.mixamorigHips} />
        {/* 蒙皮网格 */}
        <skinnedMesh
          castShadow
          receiveShadow
          onPointerOver={() => setHovered(true)}
          onPointerOut={() => setHovered(false)}
          onClick={() => setIndex((index + 1) % names.length)}
          geometry={nodes.stacy.geometry}
          skeleton={nodes.stacy.skeleton}
          rotation={[-Math.PI / 2, 0, 0]}
          scale={100}>
          <meshStandardMaterial map={texture} map-flipY={false} skinning />
        </skinnedMesh>
      </group>
      {/* 光环效果 */}
      <mesh ref={halo} receiveShadow position={[0, 1, -1]}>
        <circleGeometry args={[1, 64]} />
        <meshStandardMaterial />
      </mesh>
    </group>
  )
}
